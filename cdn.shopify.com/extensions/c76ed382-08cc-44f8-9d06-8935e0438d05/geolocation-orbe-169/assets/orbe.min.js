const orbeUISelectors = {
  defaultModal: "md-app-embed__modal",
  defaultModalForm: "md-modal__form__id",
  formSelectLanguage: "md-form__select__language",
  formSelectCountry: "md-form__select__country",
  modalSubmitButton: "md-btn__form__onSubmit",
  formUlCountrySelect: "orbeCountryList",
  formUlLanguageSelect: "orbeLanguageList",
  modalCloseButton: ".md-modal-closeButtonAction",
  returnTo: "#md-modal__form__id input[name='return_to']",
  languageCode: "#md-modal__form__id input[name='language_code']",
  countryCode: "#md-modal__form__id input[name='country_code']",
  modalHeaderFlag: ".md-modal__header__flag",
  formMDAppTitle: "[data-mdapptitle]",
  formMDAppText: "[data-mdapptext]",
  formMDAppHelperText: "[data-mdapphelpertext]",
  formMDAppCountryLabel: "[data-mdappcountrylabel]",
  formMDAppLanguageLabel: "[data-mdapplanguagelabel]",
  formMDAppCTAText: "[data-mdappctatext]",
  searchCountryInput: "#md-app-embed__modal .md-form__select__search__input",
};
let mdApp_modalTime = 1;
class Orbe {
  version = "2.13.0";
  debugMode = !1;
  klaviyoConnect = !1;
  redirect_fullpath = !1;
  exclude_paths = "";
  exclude_paths_splited = "";
  orbeSession = "";
  secondVisitRedirect = !1;
  currencyCodeEnabled = !1;
  showFlagSelectorIcon = !1;
  showFlagHeaderIcon = !1;
  showFlagHeaderIconCircle = !1;
  primaryMarketLi = null;
  advancedLanguageSettings = {
    option_language_force_default: !1,
    option_language_force_showRecommendation: !1,
    option_language_force_langRedirect: !1,
  };
  firstVisitSettings = { option_force_showModal_behaviour: !1 };
  secondVisitSettings = { option_force_redirect_behaviour: !1 };
  fallbackSkipCountry = "";
  remoteRegionCode = "";
  remoteCountryName = "";
  remoteCountryCode = "";
  translations = "";
  forceExternalStoreRedirectMode = !1;
  forceExternalStoreRedirectList = [];
  searchCountry = !1;
  constructor(e, t) {
    (this.merchantKey = e),
      (this.localCountry = t),
      (this.elements = this._getElements()),
      this._setupSettings(),
      this._setupElements();
  }
  _setupSettings() {
    (this.klaviyoConnect = mdApp_klaviyoConnect),
      (this.advancedLanguageSettings.option_language_force_default =
        mdApp_advancedLanguage.option_language_force_default),
      (this.advancedLanguageSettings.option_language_force_showRecommendation =
        mdApp_advancedLanguage.option_language_force_showRecommendation),
      (this.advancedLanguageSettings.option_language_force_langRedirect =
        mdApp_advancedLanguage.option_language_force_langRedirect),
      (this.firstVisitSettings.option_force_showModal_behaviour =
        mdApp_firstVisitSettings.option_force_showModal_behaviour),
      (this.secondVisitSettings.option_force_redirect_behaviour =
        mdApp_secondVisitSettings.option_force_redirect_behaviour),
      (this.redirect_fullpath = mdApp_syncstoresData.redirect_fullpath),
      (this.exclude_paths = mdApp_syncstoresData.exclude_paths),
      (this.exclude_paths_splited = mdApp_syncstoresData.exclude_paths_splited),
      (this.forceHideOrbe = mdApp_forceHideOrbe),
      (this.currencyCodeEnabled = mdApp_currencyCodeEnabled),
      (this.showFlagSelectorIcon = mdApp_showFlagSelectorIcon),
      (this.showFlagHeaderIcon = mdApp_showFlagHeaderIcon),
      (this.showFlagHeaderIconCircle = mdApp_showFlagHeaderIconCircle),
      (this.forceExternalStoreRedirectMode =
        mdApp_forceExternalStoreRedirectMode),
      (this.forceExternalStoreRedirectList =
        mdApp_forceExternalStoreRedirectList),
      (this.searchCountry = mdApp_searchCountrySelectorModal),
      sessionStorage.getItem("orbeSession") &&
        ((this.orbeSession = JSON.parse(sessionStorage.getItem("orbeSession"))),
        (this.currentShopifyDomain = this.orbeSession.metadata.shopifyDomain),
        (this.currentPlan = this.orbeSession.metadata.plan),
        (this.remoteCountryCode = this.orbeSession.geolocation.countryCode),
        (this.remoteRegionCode = this.orbeSession.geolocation.region),
        (this.remoteCountryName = this.orbeSession.geolocation.country));
  }
  enableDebugMode() {
    this.debugMode = !0;
  }
  _getElements() {
    return {
      defaultModalForm: document.getElementById(
        orbeUISelectors.defaultModalForm
      ),
      defaultModal: document.getElementById(orbeUISelectors.defaultModal),
      formSelectLanguage: document.getElementById(
        orbeUISelectors.formSelectLanguage
      ),
      formSelectCountry: document.getElementById(
        orbeUISelectors.formSelectCountry
      ),
      modalSubmitButton: document.getElementById(
        orbeUISelectors.modalSubmitButton
      ),
      formUlCountrySelect: document.getElementById(
        orbeUISelectors.formUlCountrySelect
      ),
      formUlLanguageSelect: document.getElementById(
        orbeUISelectors.formUlLanguageSelect
      ),
      modalCloseButton: document.querySelector(
        orbeUISelectors.modalCloseButton
      ),
      modalHeaderFlag: document.querySelector(orbeUISelectors.modalHeaderFlag),
      returnTo: document.querySelector(orbeUISelectors.returnTo),
      languageCode: document.querySelector(orbeUISelectors.languageCode),
      countryCode: document.querySelector(orbeUISelectors.countryCode),
      formMDAppTitle: document.querySelector(orbeUISelectors.formMDAppTitle),
      formMDAppText: document.querySelector(orbeUISelectors.formMDAppText),
      formMDAppHelperText: document.querySelector(
        orbeUISelectors.formMDAppHelperText
      ),
      formMDAppCountryLabel: document.querySelector(
        orbeUISelectors.formMDAppCountryLabel
      ),
      formMDAppLanguageLabel: document.querySelector(
        orbeUISelectors.formMDAppLanguageLabel
      ),
      formMDAppCTAText: document.querySelector(
        orbeUISelectors.formMDAppCTAText
      ),
      searchCountryInput: document.querySelector(
        orbeUISelectors.searchCountryInput
      ),
    };
  }
  _externalVariables() {
    if (this.debugMode) {
      if (
        (console.log(
          "mdApp_currentPageRelativeUrl: " + mdApp_currentPageRelativeUrl
        ),
        console.log("mdApp_redirectMode: " + mdApp_redirectMode),
        console.log("mdApp_redirectRegionMode: " + mdApp_redirectRegionMode),
        console.log("mdApp_redirectRegionCode: " + mdApp_redirectRegionCode),
        console.log("mdApp_redirectCountryCode: " + mdApp_redirectCountryCode),
        console.log("mdApp_redirectCountryName: " + mdApp_redirectCountryName),
        console.log(
          "mdApp_redirectCountryCurrencyCode: " +
            mdApp_redirectCountryCurrencyCode
        ),
        console.log(
          "mdApp_redirectCountryCurrencySymbol: " +
            mdApp_redirectCountryCurrencySymbol
        ),
        console.log("mdApp_redirectLocale: " + mdApp_redirectLocale),
        console.log("mdApp_redirectEndonymName: " + mdApp_redirectEndonymName),
        console.log("mdApp_redirectUrl: " + mdApp_redirectUrl),
        console.log("mdApp_forceHideOrbe: " + mdApp_forceHideOrbe),
        "undefined" != typeof mdApp_redirectExternalList)
      ) {
        console.log("mdApp_redirectExternalList");
        for (const e of mdApp_redirectExternalList)
          console.log(
            "__mdApp_redirectExternalList__Item: " + JSON.stringify(e)
          );
      }
      console.log("mdApp_skipRequestAPI: " + mdApp_skipRequestAPI),
        console.log("mdApp_merchantKey: " + mdApp_merchantKey),
        console.log("mdApp_MAIN_URL: " + mdApp_MAIN_URL),
        console.log("mdApp_currentCountryCode: " + mdApp_currentCountryCode),
        console.log("mdApp_currentLocaleCode: " + mdApp_currentLocaleCode),
        console.log("mdApp_blockDomain: " + mdApp_blockDomain),
        console.log("mdApp_translateTextJSON: " + mdApp_translateTextJSON),
        console.log("mdApp_currencyCodeEnabled: " + this.currencyCodeEnabled),
        console.log("mdApp_showFlagHeaderIcon: " + this.showFlagHeaderIcon),
        console.log(
          "mdApp_showFlagHeaderIconCircle: " + this.showFlagHeaderIconCircle
        ),
        console.log("mdApp_klaviyoConnect: " + mdApp_klaviyoConnect),
        console.log(
          "mdApp_advancedLanguage: " + JSON.stringify(mdApp_advancedLanguage)
        ),
        console.log(
          "mdApp_firstVisitSettings: " +
            JSON.stringify(mdApp_firstVisitSettings)
        ),
        console.log(
          "mdApp_secondVisitSettings: " +
            JSON.stringify(mdApp_secondVisitSettings)
        ),
        console.log(
          "mdApp_syncstoresData: " + JSON.stringify(mdApp_syncstoresData)
        ),
        "undefined" != typeof mdApp_forceSetCountry &&
          console.log("mdApp_forceSetCountry: " + mdApp_forceSetCountry);
    }
  }
  _setupElements() {
    this._refreshCountryEvents(),
      this._refreshLanguageEvents(),
      null !== this.elements.defaultModalForm &&
        this.elements.defaultModalForm.addEventListener("keyup", (e) => {
          "ESCAPE" === e.code.toUpperCase() &&
            (this._hidePanel(
              this.elements.formSelectCountry,
              this.elements.formUlCountrySelect
            ),
            this._hidePanel(
              this.elements.formSelectLanguage,
              this.elements.formUlLanguageSelect
            ));
        }),
      null !== this.elements.modalCloseButton &&
        this.elements.modalCloseButton.addEventListener("click", () => {
          0 <= mdApp_modalTime &&
            (document.cookie = `mdApp_cookieModalTime=true; path=/; max-age=${
              86400 * mdApp_modalTime
            };`),
            this.closeModal(orbeUISelectors.defaultModal);
        }),
      null !== this.elements.modalSubmitButton &&
        this.elements.modalSubmitButton.addEventListener("click", (e) => {
          var t = {
            form: this.elements.defaultModalForm,
            mdFormSelectCountry: this.elements.formSelectCountry,
            mdFormSelectLanguage: this.elements.formSelectLanguage,
            mdFormUlCountrySelect: this.elements.formUlCountrySelect,
            mdFormCountryCode: this.elements.countryCode,
            mdFormLanguageCode: this.elements.languageCode,
            mdFormReturnTo: this.elements.returnTo,
          };
          return this._submitFlow(e, t);
        });
  }
  _submitFlow(e, t) {
    null != e && e.preventDefault();
    let o = t.form;
    var e = t.mdFormSelectCountry,
      r = t.mdFormSelectLanguage;
    let n = t.mdFormUlCountrySelect,
      a = t.mdFormCountryCode,
      l = t.mdFormLanguageCode;
    t = t.mdFormReturnTo;
    let s,
      i = e.dataset.value,
      c =
        (null != n
          ? Array.from(n.querySelectorAll("a")).forEach((e) => {
              e.dataset.country === i && (s = e);
            })
          : (s = e),
        (a.value = i),
        s.dataset.domainurl);
    var e = s.dataset.primary,
      d = this.getCountryDomain();
    let m = t,
      u = new URLSearchParams(window.location.search);
    if (
      ((m.value = ""),
      (m.value = window.location.pathname + "?" + u.toString()),
      u.has("mdApp_countryCodeDomain") &&
        ((t = "mdApp_countryCodeDomain=" + u.get("mdApp_countryCodeDomain")),
        (p = "mdApp_countryCodeDomain=" + i),
        (m.value = m.value.replace(t, p))),
      u.has("country"))
    ) {
      var t = "country=" + u.get("country"),
        p = "country=" + i;
      m.value = m.value.replace(t, p);
    } else if (!1 === u.has("country")) {
      let e = "";
      (e = m.value.includes("?") ? "&country=" + i : "?country=" + i),
        (m.value = m.value + e);
    }
    (m.value = m.value + window.location.hash),
      this.debugMode && console.log("Return To: " + m.value);
    let h = null;
    null != r &&
      ((h = r.dataset.value),
      (l.value = h),
      (this.advancedLanguageSettings.option_language_force_showRecommendation ||
        this.secondVisitSettings.option_force_redirect_behaviour) &&
        (document.cookie = `mdApp_showRecommendationLang=${h}; domain=${d}; path=/; max-age=5184000;`));
    (t = s.dataset.subfoldersuffix), (p = s.dataset.defaultlocale);
    if (
      ((document.cookie = `mdApp_countryCodeDomain=${i}; domain=${d}; path=/; max-age=5184000;`),
      !1 === this.secondVisitRedirect &&
        this.metricsRequest(this.merchantKey).then((e) => e),
      mdApp_redirectMode)
    ) {
      let t = this._forceRedirectFullPath(!0, i);
      if (
        ("" !== t && "/" !== t[0] && (t = "/" + t),
        "undefined" != typeof mdApp_redirectExternalList &&
          "" !== mdApp_redirectExternalList &&
          Array.isArray(mdApp_redirectExternalList))
      )
        for (const g of mdApp_redirectExternalList) {
          let e = g.Url + window.location.hash;
          if (g.RegionMode && i === g.RegionCode)
            return (
              t && g.isShopify && (e = g.Url + t),
              (document.cookie = `mdApp_domainUrlTo=${e}; domain=${d}; path=/; max-age=5184000;`),
              this.debugMode
                ? console.log("Redirect to: " + e)
                : (window.location = e),
              !0
            );
          if (i === g.CountryCode && !1 === g.RegionMode)
            return (
              t && g.isShopify && (e = g.Url + t),
              (document.cookie = `mdApp_domainUrlTo=${e}; domain=${d}; path=/; max-age=5184000;`),
              this.debugMode
                ? console.log("Redirect to: " + e)
                : (window.location = e),
              !0
            );
        }
      else {
        if (
          i === mdApp_redirectCountryCode &&
          !1 === mdApp_redirectRegionMode
        ) {
          let e = mdApp_redirectUrl + window.location.hash;
          return (
            t && mdApp_redirectIsShopify && (e = mdApp_redirectUrl + t),
            (document.cookie = `mdApp_domainUrlTo=${e}; domain=${d}; path=/; max-age=5184000;`),
            this.debugMode
              ? console.log("Redirect to: " + e)
              : (window.location = e),
            !0
          );
        }
        if (mdApp_redirectRegionMode && i === mdApp_redirectRegionCode) {
          let e = mdApp_redirectUrl + window.location.hash;
          return (
            t && mdApp_redirectIsShopify && (e = mdApp_redirectUrl + t),
            (document.cookie = `mdApp_domainUrlTo=${e}; domain=${d}; path=/; max-age=5184000;`),
            this.debugMode
              ? console.log("Redirect to: " + e)
              : (window.location = e),
            !0
          );
        }
      }
    }
    if (
      ("plus" === this.currentPlan || "enterprise" === this.currentPlan) &&
      ((void 0 !== e &&
        "undefined" === e &&
        void 0 !== c &&
        c != this.currentShopifyDomain &&
        "undefined" !== c) ||
        this.hasForceExternalStoreRedirect())
    )
      return (
        (c += this.getSubFolderDomain(t, p, h)),
        (document.cookie = `mdApp_domainUrlTo=${c}; domain=${d}; path=/; max-age=5184000;`),
        (r = "https://"),
        (e = this._forceRedirectFullPath(!0, i))
          ? (c += e)
          : (c = c + "?country=" + i + window.location.hash),
        (r = "https://" + c),
        this.debugMode
          ? console.log("Redirect to: " + r)
          : (window.location = r),
        !0
      );
    return (
      this.debugMode && console.log("Submit form"),
      !1 === this.debugMode && o.submit(),
      !0
    );
  }
  truncateString(e, t) {
    return e.length <= t ? e : e.slice(0, t) + "...";
  }
  _refreshCountryEvents() {
    null !== this.elements.formSelectCountry &&
      (this.elements.defaultModal.addEventListener("click", (e) => {
        e.target.id !== orbeUISelectors.formSelectLanguage &&
          e.target.id !== orbeUISelectors.formSelectCountry &&
          "md-form__select__country__list-link-wrapper" !==
            e.target.className &&
          "md-form__select__language__list-link-wrapper" !==
            e.target.className &&
          "md-form__select__img" !== e.target.className &&
          "md-form__select__span" !== e.target.className &&
          (this._hidePanel(
            this.elements.formSelectLanguage,
            this.elements.formUlLanguageSelect
          ),
          this._hidePanel(
            this.elements.formSelectCountry,
            this.elements.formUlCountrySelect
          ),
          this.searchCountry &&
            ((this.elements.searchCountryInput.value = ""),
            orbito.searchCountryInput()));
      }),
      this.elements.formSelectCountry.addEventListener("click", () => {
        if (this.searchCountry)
          "" === this.elements.searchCountryInput.value &&
            (this.elements.formUlCountrySelect.focus(),
            this.elements.formUlCountrySelect.toggleAttribute("hidden"),
            this.elements.formSelectCountry.setAttribute(
              "aria-expanded",
              (
                "false" ===
                this.elements.formSelectCountry.getAttribute("aria-expanded")
              ).toString()
            ),
            this._hidePanel(
              this.elements.formSelectLanguage,
              this.elements.formUlLanguageSelect
            ),
            this.elements.searchCountryInput.focus());
        else {
          this.elements.formUlCountrySelect.toggleAttribute("hidden"),
            this.elements.formSelectCountry.setAttribute(
              "aria-expanded",
              (
                "false" ===
                this.elements.formSelectCountry.getAttribute("aria-expanded")
              ).toString()
            ),
            this._hidePanel(
              this.elements.formSelectLanguage,
              this.elements.formUlLanguageSelect
            );
          let e = this.elements.formUlCountrySelect.firstElementChild;
          e && e.focus();
        }
      }),
      this.elements.formUlCountrySelect.addEventListener(
        "keydown",
        function (e) {
          let t = this.querySelectorAll("li"),
            o = document.activeElement;
          var r = Array.from(t).indexOf(o);
          switch (e.key) {
            case "ArrowUp":
              e.preventDefault(), 0 < r && t[r - 1].focus();
              break;
            case "ArrowDown":
              e.preventDefault(), r < t.length - 1 && t[r + 1].focus();
              break;
            case "Enter":
              e.preventDefault(), o.firstElementChild.click();
          }
        }
      ),
      this.elements.formUlCountrySelect.querySelectorAll("a").forEach((e) =>
        e.addEventListener("click", (e) => {
          e.preventDefault(),
            this._setCountrySelector(e.currentTarget),
            this._hidePanel(
              this.elements.formSelectCountry,
              this.elements.formUlCountrySelect
            ),
            null !== this.elements.formSelectLanguage &&
              this.refreshLanguageSelector(
                this.elements.formSelectLanguage,
                this.elements.formSelectCountry,
                this.elements.formUlLanguageSelect,
                this.elements.formUlCountrySelect
              );
        })
      ));
  }
  _addCountryEvents(e) {
    e.addEventListener("click", (e) => {
      e.preventDefault(),
        this._setCountrySelector(e.currentTarget),
        null !== this.elements.formSelectCountry &&
          (this._hidePanel(
            this.elements.formSelectCountry,
            this.elements.formUlCountrySelect
          ),
          null !== this.elements.formSelectLanguage &&
            this.refreshLanguageSelector(
              this.elements.formSelectLanguage,
              this.elements.formSelectCountry,
              this.elements.formUlLanguageSelect,
              this.elements.formUlCountrySelect
            ));
    });
  }
  _addLanguageEvents(e) {
    e.addEventListener("click", (e) => {
      e.preventDefault(),
        this._setLanguageSelector(e.currentTarget),
        null !== this.elements.formSelectLanguage &&
          this._hidePanel(
            this.elements.formSelectLanguage,
            this.elements.formUlLanguageSelect
          );
    });
  }
  _refreshLanguageEvents() {
    null !== this.elements.formSelectLanguage &&
      (this.elements.formSelectLanguage.addEventListener("click", () => {
        this.elements.formUlLanguageSelect.focus(),
          this.elements.formUlLanguageSelect.toggleAttribute("hidden"),
          this.elements.formSelectLanguage.setAttribute(
            "aria-expanded",
            (
              "false" ===
              this.elements.formSelectLanguage.getAttribute("aria-expanded")
            ).toString()
          ),
          this._hidePanel(
            this.elements.formSelectCountry,
            this.elements.formUlCountrySelect
          );
        let e = this.elements.formUlLanguageSelect.firstElementChild;
        e && e.focus();
      }),
      this.elements.formUlLanguageSelect.addEventListener(
        "keydown",
        function (e) {
          let t = this.querySelectorAll("li"),
            o = document.activeElement;
          var r = Array.from(t).indexOf(o);
          switch (e.key) {
            case "ArrowUp":
              e.preventDefault(), 0 < r && t[r - 1].focus();
              break;
            case "ArrowDown":
              e.preventDefault(), r < t.length - 1 && t[r + 1].focus();
              break;
            case "Enter":
              e.preventDefault(), o.firstElementChild.click();
          }
        }
      ),
      this.elements.formUlLanguageSelect.querySelectorAll("a").forEach((e) =>
        e.addEventListener("click", (e) => {
          e.preventDefault(),
            this._setLanguageSelector(e.currentTarget),
            this._hidePanel(
              this.elements.formSelectLanguage,
              this.elements.formUlLanguageSelect
            );
        })
      ));
  }
  _hidePanel(e, t) {
    null !== e &&
      (e.setAttribute("aria-expanded", "false"),
      t.setAttribute("hidden", !0),
      this.searchCountry &&
        ((this.elements.searchCountryInput.value = ""),
        orbito.searchCountryInput()));
  }
  _createLanguageOption(e, t) {
    let o = document.createElement("li"),
      r =
        (o.setAttribute("tabindex", "-1"),
        o.setAttribute("data-locale", t),
        document.createElement("a")),
      n =
        (r.setAttribute("href", "#"),
        r.classList.add("md-form__select__language__list-link"),
        r.setAttribute("data-value", t),
        document.createElement("div")),
      a =
        (n.classList.add("md-form__select__language__list-link-wrapper"),
        document.createElement("span"));
    return (
      (a.textContent = e),
      a.setAttribute("data-value", t),
      o.append(r),
      r.append(n),
      n.append(a),
      { li: o, a: r, div: n }
    );
  }
  refreshLanguageSelector(n, a, l, s) {
    if (void 0 !== this.remoteCountryCode && null !== a) {
      var i = navigator.language.split("-");
      if (null !== n) {
        let t = a.dataset.value;
        if (mdApp_redirectMode)
          if (
            "undefined" != typeof mdApp_redirectExternalList &&
            "" !== mdApp_redirectExternalList &&
            Array.isArray(mdApp_redirectExternalList)
          ) {
            let e = !1;
            for (const p of mdApp_redirectExternalList)
              if (t === p.CountryCode || t === p.RegionCode) {
                var c = this._createLanguageOption(p.EndonymName, p.Locale);
                l.replaceChildren(),
                  l.appendChild(c.li),
                  this._addLanguageEvents(c.a),
                  this._setLanguageSelector(c.a),
                  (e = !0);
                break;
              }
            if (e) return !0;
          } else if (
            t === mdApp_redirectCountryCode ||
            t === mdApp_redirectRegionCode
          )
            return (
              (n = this._createLanguageOption(
                mdApp_redirectEndonymName,
                mdApp_redirectLocale
              )),
              l.replaceChildren(),
              l.appendChild(n.li),
              this._addLanguageEvents(n.a),
              this._setLanguageSelector(n.a),
              !0
            );
        let o;
        Array.from(s.querySelectorAll("a")).forEach((e) => {
          e.dataset.country === t && (o = e);
        });
        var d = this.advancedLanguageSettings.option_language_force_default;
        l.replaceChildren();
        let e = o.dataset.locales,
          r = o.dataset.namelocales;
        if (e && r) {
          let t = e.split(",");
          var m = r.split(",");
          let o = !1;
          for (let e = 0; e < t.length; e++) {
            var u = this._createLanguageOption(m[e], t[e]);
            0 === e && this._setLanguageSelector(u.a),
              d ||
                o ||
                (t[e] === i[0] || t[e] === navigator.language
                  ? (this._setLanguageSelector(u.a), (o = !0))
                  : "en" === t[e] && this._setLanguageSelector(u.a)),
              l.appendChild(u.li),
              this._addLanguageEvents(u.a);
          }
          d &&
            Array.from(l.querySelectorAll("a")).forEach((e) => {
              e.dataset.value === t[0] && this._setLanguageSelector(e);
            });
        }
      }
    }
  }
  _forceRedirectFullPath(n = !0, a = "") {
    if (
      (this.debugMode &&
        console.log("Redirect Full Path: " + this.redirect_fullpath),
      this.redirect_fullpath)
    ) {
      let e = "",
        t = mdApp_currentPageRelativeUrl,
        o = new URLSearchParams(window.location.search),
        r = o.toString();
      var l;
      return (this.debugMode && console.log("Url params: " + r), r)
        ? ((r = o.has("country")
            ? ((l = "country=" + o.get("country")),
              r.replace(l, "country=" + a))
            : r + "&country=" + a),
          this.debugMode &&
            console.log(
              "Url final casuistica 1: " +
                t.substring(1) +
                "?" +
                r +
                window.location.hash
            ),
          t.substring(1) + "?" + r + window.location.hash)
        : (n &&
            ((e = t.substring(1) + "?country=" + a + window.location.hash),
            this.debugMode && console.log("Url final casuistica 2: " + e)),
          e);
    }
    return "";
  }
  getAPIShopUrl(e = "") {
    var t = window.location.origin;
    return mdApp_MAIN_URL + "/a/mushdesk_orbe/api/v1/" + e + "/?shop=" + t;
  }
  getSubFolderDomain(t, o, r = null) {
    if (null !== r) {
      let e = r;
      if ("" != t)
        return (
          2 < e.length && ((r = e.split("-")), (e = r[0])),
          "/" + e + "-" + t + "/"
        );
      if (e != o) return "/" + e + "/";
    }
    return "/";
  }
  getCountryDomain() {
    let e = location.hostname;
    if ("www" === location.hostname.split(".")[0]) {
      if (void 0 !== location.hostname.split(".")[3])
        e =
          location.hostname.split(".")[1] +
          "." +
          location.hostname.split(".")[2] +
          "." +
          location.hostname.split(".")[3];
      else if (void 0 !== location.hostname.split(".")[2]) {
        if (
          location.hostname.split(".")[1].length <= 3 &&
          2 == location.hostname.split(".")[2].length
        )
          return e;
        e =
          location.hostname.split(".")[1] +
          "." +
          location.hostname.split(".")[2];
      }
    } else if (void 0 !== location.hostname.split(".")[3])
      e =
        location.hostname.split(".")[3].length < 3
          ? location.hostname.split(".")[1] +
            "." +
            location.hostname.split(".")[2] +
            "." +
            location.hostname.split(".")[3]
          : location.hostname.split(".")[2] +
            "." +
            location.hostname.split(".")[3];
    else if (void 0 !== location.hostname.split(".")[2]) {
      if (
        location.hostname.split(".")[1].length <= 3 &&
        2 == location.hostname.split(".")[2].length
      )
        return e;
      if (
        2 == location.hostname.split(".")[1].length &&
        3 == location.hostname.split(".")[2].length
      )
        return e;
      e =
        location.hostname.split(".")[1] + "." + location.hostname.split(".")[2];
    }
    return e;
  }
  excludePathEnabledAndExists() {
    if (this.exclude_paths) {
      let t = window.location.pathname,
        o = !1;
      if (Array.isArray(this.exclude_paths_splited))
        Array.from(this.exclude_paths_splited).forEach(function (e) {
          if (e === t || e + "/" === t || t.includes(e)) return (o = !0);
          if (e.includes("*")) {
            e = e.replace("*", "");
            if (t.includes(e)) return (o = !0);
          }
        });
      else {
        if (
          this.exclude_paths_splited === t ||
          this.exclude_paths_splited + "/" === t ||
          t.includes(this.exclude_paths_splited)
        )
          return (o = !0);
        if (this.exclude_paths_splited.includes("*")) {
          var e = this.exclude_paths_splited.replace("*", "");
          if (t.includes(e)) return (o = !0);
        }
      }
      return o;
    }
    return !1;
  }
  openModal(e = "") {
    let t = document.getElementById(e);
    e = "orbe--opened";
    !(t.style.display = "block") === document.body.classList.contains(e) &&
      document.body.classList.add(e),
      document.body.prepend(t),
      t.focus();
  }
  closeModal(e = "") {
    let t = document.getElementById(e);
    t.style.display = "none";
    e = "orbe--opened";
    document.body.classList.contains(e) && document.body.classList.remove(e);
  }
  openAndRefreshModal() {
    this._setFlagHeaderIcon(),
      null !== this.elements.formSelectLanguage &&
        this.refreshLanguageSelector(
          this.elements.formSelectLanguage,
          this.elements.formSelectCountry,
          this.elements.formUlLanguageSelect,
          this.elements.formUlCountrySelect
        ),
      this.openModal(orbeUISelectors.defaultModal);
  }
  openModalWithoutRefresh() {
    let e = this.elements.formUlCountrySelect,
      t = this.elements.formUlLanguageSelect;
    Array.from(e.querySelectorAll("a")).forEach((e) => {
      e.dataset.country === this.localCountry &&
        (this._setCountrySelector(e),
        null !== this.elements.formSelectLanguage &&
          (this.refreshLanguageSelector(
            this.elements.formSelectLanguage,
            this.elements.formSelectCountry,
            this.elements.formUlLanguageSelect,
            this.elements.formUlCountrySelect
          ),
          Array.from(t.querySelectorAll("a")).forEach((e) => {
            e.dataset.value === window.Shopify.locale &&
              this._setLanguageSelector(e);
          })));
    }),
      this.openModal(orbeUISelectors.defaultModal);
  }
  _setFlagHeaderIcon() {
    if (this.showFlagHeaderIcon) {
      let e = this.elements.modalHeaderFlag;
      var r = this.remoteCountryCode.toLowerCase();
      e.classList.add("orbe-flags-" + r);
      let t,
        o =
          (this.showFlagHeaderIconCircle &&
            ((t = document.createElement("img")).setAttribute(
              "alt",
              this.remoteCountryCode
            ),
            t.setAttribute(
              "src",
              "https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/7.2.1/flags/1x1/" +
                this.remoteCountryCode.toLowerCase() +
                ".svg"
            ),
            e.replaceChildren(),
            e.appendChild(t)),
          !1);
      switch (
        (("#ffffff" !== mdApp_backgroundModal &&
          "#fcfcfc" !== mdApp_backgroundModal &&
          "#fafafa" !== mdApp_backgroundModal &&
          "#f7f7f7" !== mdApp_backgroundModal) ||
          (o = !0),
        r)
      ) {
        case "bg":
        case "bh":
        case "cl":
        case "cy":
        case "cz":
        case "dj":
        case "dz":
        case "ee":
        case "fi":
        case "fo":
        case "ge":
        case "gg":
        case "gi":
        case "gl":
        case "ic":
        case "id":
        case "il":
        case "je":
        case "jp":
        case "mc":
        case "mg":
        case "mt":
        case "np":
        case "om":
        case "pa":
        case "ph":
        case "pl":
        case "qa":
        case "rs":
        case "ru":
        case "sg":
        case "si":
        case "sk":
        case "sm":
        case "sx":
        case "to":
        case "uy":
        case "vi":
        case "kr":
        case "va":
          this.showFlagHeaderIconCircle && o
            ? t.classList.add("md-fix-flag__header-white")
            : o && e.classList.add("md-fix-flag__header-white");
      }
    }
  }
  findCountryByData(t, o) {
    let r = null;
    return (
      Array.from(
        this.elements.formUlCountrySelect.querySelectorAll("a")
      ).forEach((e) => {
        e.dataset[t] === o && (r = e);
      }),
      r
    );
  }
  _translateText(e, t) {
    let o = this.findCountryByData("country", e),
      r = !1,
      n = (null != o ? (r = !0) : (o = this.primaryMarketLi), "");
    var a, l;
    "free" !== this.currentPlan && mdApp_translateTextJSON
      ? ((a = mdApp_translateTextJSON.replaceAll("=>", ":")),
        (a = JSON.parse(a)),
        (this.translations = a),
        (l = navigator.language.split("-"))[0] && a[l[0]]
          ? ("en" === l[0] && (n = "en"), this._setNewTextElements(a[l[0]], r))
          : a[navigator.language]
          ? this._setNewTextElements(a[navigator.language], r)
          : a.en
          ? ((n = "en"), this._setNewTextElements(a.en, r))
          : !1 === r &&
            "undefined" != typeof mdApp_fallbackText &&
            e !== this.fallbackSkipCountry &&
            (this.elements.formMDAppTitle.innerHTML = mdApp_fallbackText))
      : !1 === r &&
        "undefined" != typeof mdApp_fallbackText &&
        e !== this.fallbackSkipCountry &&
        (this.elements.formMDAppTitle.innerHTML = mdApp_fallbackText),
      this._replaceTextVars(t, o, n);
  }
  _setNewTextElements(e, t = !0) {
    t
      ? (this.elements.formMDAppTitle.innerHTML = e.title)
      : void 0 !== e.fallbackText &&
        this.remoteCountryCode !== this.fallbackSkipCountry
      ? (this.elements.formMDAppTitle.innerHTML = e.fallbackText)
      : "undefined" != typeof mdApp_fallbackText &&
        this.remoteCountryCode !== this.fallbackSkipCountry &&
        (this.elements.formMDAppTitle.innerHTML = mdApp_fallbackText),
      (this.elements.formMDAppText.innerHTML = e.text),
      (this.elements.formMDAppHelperText.innerHTML = e.helperText),
      void 0 !== e.countryLabel &&
        (this.elements.formMDAppCountryLabel.innerHTML = e.countryLabel),
      null !== this.elements.formMDAppLanguageLabel &&
        void 0 !== e.languageLabel &&
        (this.elements.formMDAppLanguageLabel.innerHTML = e.languageLabel),
      (this.elements.formMDAppCTAText.innerHTML = e.ctaText);
  }
  async getRemoteCountryCode() {
    return this.remoteCountryCode;
  }
  _setCountrySelector(e) {
    e.setAttribute("aria-current", "true");
    let t = e.querySelector("span").textContent.trim();
    null !== this.elements.formSelectCountry &&
      ((this.elements.formSelectCountry.dataset.value = e.dataset.country),
      null !== this.elements.formSelectLanguage &&
        (t = this.truncateString(
          e.querySelector("span").textContent.trim(),
          26
        )),
      this.showFlagSelectorIcon &&
        (this.elements.formSelectCountry
          .querySelector("img")
          .setAttribute("alt", e.dataset.country),
        this.elements.formSelectCountry
          .querySelector("img")
          .setAttribute("src", e.querySelector("img").src),
        e.querySelector("img").dataset.fix
          ? this.elements.formSelectCountry
              .querySelector("img")
              .classList.add("md-fix-flag-white")
          : this.elements.formSelectCountry
              .querySelector("img")
              .classList.remove("md-fix-flag-white"),
        (t =
          null !== this.elements.formSelectLanguage
            ? this.truncateString(
                e.querySelector("span").textContent.trim(),
                23
              )
            : this.truncateString(
                e.querySelector("span").textContent.trim(),
                52
              ))),
      (this.elements.formSelectCountry.querySelector("span").textContent = t));
  }
  _createCountryOption(e, r, t = {}) {
    let o = document.createElement("li");
    o.setAttribute("tabindex", "-1"), o.setAttribute("data-name", e);
    let n = document.createElement("a"),
      a =
        (n.setAttribute("href", "#"),
        n.classList.add("md-form__select__country__list-link"),
        n.setAttribute("data-value", r),
        n.setAttribute("data-country", r),
        !1);
    if (
      (0 === Object.keys(t).length
        ? mdApp_redirectRegionMode &&
          "" !== mdApp_redirectRegionCode &&
          (n.setAttribute("data-country", mdApp_redirectRegionCode),
          n.setAttribute("data-regionmode", !0),
          (a = !0))
        : t.RegionMode &&
          "" !== t.RegionCode &&
          (n.setAttribute("data-country", t.RegionCode),
          n.setAttribute("data-regionmode", !0),
          (a = !0)),
      n.setAttribute("data-domainurl", "undefined"),
      n.setAttribute("data-subfoldersuffix", "undefined"),
      n.setAttribute("data-defaultlocale", "undefined"),
      n.setAttribute("data-primary", "undefined"),
      !1 === a)
    ) {
      let e = this.findCountryByData("country", r);
      null != e && e.parentElement.remove();
    }
    let l = document.createElement("div"),
      s =
        (l.classList.add("md-form__select__country__list-link-wrapper"),
        document.createElement("span"));
    if (
      ((s.textContent = e),
      0 === Object.keys(t).length
        ? mdApp_redirectMode &&
          ("symbol" === this.currencyCodeEnabled &&
          null !== mdApp_redirectCountryCurrencySymbol
            ? (s.textContent =
                e + " (" + mdApp_redirectCountryCurrencySymbol + ")")
            : "iso" === this.currencyCodeEnabled ||
              ("iso_flag" === this.currencyCodeEnabled &&
                null !== mdApp_redirectCountryCurrencyCode)
            ? (s.textContent =
                e + " (" + mdApp_redirectCountryCurrencyCode + ")")
            : "iso_symbol" === this.currencyCodeEnabled ||
              ("iso_symbol_flag" === this.currencyCodeEnabled &&
                null !== mdApp_redirectCountryCurrencyCode)
            ? (s.textContent =
                e +
                " (" +
                mdApp_redirectCountryCurrencyCode +
                " " +
                mdApp_redirectCountryCurrencySymbol +
                ")")
            : "symbol_flag" === this.currencyCodeEnabled &&
              null !== mdApp_redirectCountryCurrencyCode &&
              (s.textContent =
                e + " (" + mdApp_redirectCountryCurrencySymbol + ")"))
        : "symbol" === this.currencyCodeEnabled &&
          null !== t.CountryCurrencySymbol
        ? (s.textContent = e + " (" + t.CountryCurrencySymbol + ")")
        : "iso" === this.currencyCodeEnabled ||
          ("iso_flag" === this.currencyCodeEnabled &&
            null !== t.CountryCurrencyCode)
        ? (s.textContent = e + " (" + t.CountryCurrencyCode + ")")
        : "iso_symbol" === this.currencyCodeEnabled ||
          ("iso_symbol_flag" === this.currencyCodeEnabled &&
            null !== t.CountryCurrencyCode)
        ? (s.textContent =
            e +
            " (" +
            t.CountryCurrencyCode +
            " " +
            t.CountryCurrencySymbol +
            ")")
        : "symbol_flag" === this.currencyCodeEnabled &&
          null !== t.CountryCurrencySymbol &&
          (s.textContent = e + " (" + t.CountryCurrencySymbol + ")"),
      o.append(n),
      n.append(l),
      this.showFlagSelectorIcon)
    ) {
      let e = document.createElement("div"),
        t =
          (e.classList.add("md-form__select__country__list__flag-wrapper"),
          document.createElement("div")),
        o =
          (t.classList.add("md-form__select__country__list-link__flag"),
          document.createElement("img"));
      o.setAttribute("alt", r),
        o.setAttribute(
          "src",
          "https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/6.15.0/flags/1x1/" +
            r.toLowerCase() +
            ".svg"
        ),
        e.appendChild(t),
        t.appendChild(o),
        l.append(e);
    }
    return l.append(s), { li: o, a: n, div: l };
  }
  _setLanguageSelector(e) {
    e.setAttribute("aria-current", "true"),
      null !== this.elements.formSelectLanguage &&
        ((this.elements.formSelectLanguage.dataset.value = e.dataset.value),
        (this.elements.formSelectLanguage.querySelector("span").textContent =
          e.querySelector("span").textContent));
  }
  async geolocationRequest(e) {
    var t = this.getAPIShopUrl("geolocation");
    this.fetchAPI(t, e)
      .then(async (e) => {
        if (void 0 === e.geolocation) return await this.shopifyGeolocation();
        return e && "success" === e.geolocation.status
          ? ((this.currentShopifyDomain = e.metadata.shopifyDomain),
            (this.currentPlan = e.metadata.plan),
            (this.remoteCountryCode = e.geolocation.countryCode),
            (this.remoteRegionCode = e.geolocation.region),
            (this.remoteCountryName = e.geolocation.country),
            this.setOrbeSession(e),
            this.processGeolocation())
          : void 0;
      })
      .catch((e) => {
        console.error(e);
      });
  }
  async metricsRequest(e, t = "first") {
    var o = this.getAPIShopUrl("metrics");
    this.fetchAPI(o, e, {
      "Content-Type": "application/json",
      "X-API-KEY": e,
      "X-REQUEST-TYPE": t,
    })
      .then((e) => {
        if (e && void 0 !== e.status && "success" === e.status) return !0;
      })
      .catch((e) => {
        console.error(e);
      });
  }
  async shopifyGeolocation() {
    var e =
      window.Shopify.routes.root +
      "browsing_context_suggestions.json?country[enabled]=true&country[exclude]=" +
      window.Shopify.country +
      "&language[enabled]=true&language[exclude]=" +
      window.Shopify.language;
    await fetch(e)
      .then((e) => e.json())
      .then((e) => {
        if (e)
          return (
            (this.remoteCountryCode = e.detected_values.country.handle),
            (this.remoteCountryName = e.detected_values.country.name),
            (this.currentShopifyDomain = window.Shopify.shop),
            (this.currentPlan = mdApp_currentPlan),
            this.processGeolocation()
          );
      })
      .catch((e) => {
        console.error(e);
      });
  }
  setOrbeSession(e) {
    sessionStorage.setItem("orbeSession", JSON.stringify(e));
  }
  processGeolocation() {
    let n = this.remoteCountryCode;
    var e = this.remoteCountryName,
      a =
        (void 0 !== window.glopal &&
          ((this.remoteCountryCode = window.glopal.config.target.countryCode),
          (n = this.remoteCountryCode)),
        this.localCountry);
    let o = this.remoteRegionCode,
      r = navigator.language.split("-");
    var t = this.elements.formSelectCountry;
    let l = this.elements.formUlCountrySelect;
    var s = this.elements.formSelectLanguage;
    let i = this.elements.formUlLanguageSelect,
      c = this.elements.modalSubmitButton;
    var d = "orbe-country-code--" + n;
    if (
      ("undefined" != typeof mdApp_primaryMarketLi
        ? (this.primaryMarketLi = this.findCountryByData(
            "country",
            mdApp_primaryMarketLi
          ))
        : (this.primaryMarketLi = this.findCountryByData(
            "primarymarket",
            "true"
          )),
      !1 === document.body.classList.contains(d) &&
        (document.body.classList.add(d),
        (d = "orbe-language-code--" + window.Shopify.locale),
        document.body.classList.add(d)),
      null === this.elements.defaultModal)
    )
      return !0;
    if (
      "" !== mdApp_blockDomain &&
      (mdApp_blockDomain === location.hostname ||
        window.location.href.includes(mdApp_blockDomain))
    )
      return !0;
    let m,
      u = new URLSearchParams(window.location.search);
    if (
      (u.has("OrbeDMMDApp") && this.enableDebugMode(),
      mdApp_redirectMode &&
        ("undefined" != typeof mdApp_redirectExternalList &&
        "" !== mdApp_redirectExternalList &&
        Array.isArray(mdApp_redirectExternalList)
          ? Array.from(mdApp_redirectExternalList).forEach((e) => {
              var t = this._createCountryOption(
                e.CountryName,
                e.CountryCode,
                e
              );
              l.appendChild(t.li),
                e.RegionMode && "" !== e.RegionCode
                  ? o === e.RegionCode && this._setCountrySelector(t.a)
                  : n === e.CountryCode && this._setCountrySelector(t.a),
                this._addCountryEvents(t.a);
            })
          : ((d = this._createCountryOption(
              mdApp_redirectCountryName,
              mdApp_redirectCountryCode
            )),
            l.appendChild(d.li),
            mdApp_redirectRegionMode && "" !== mdApp_redirectRegionCode
              ? o === mdApp_redirectRegionCode && this._setCountrySelector(d.a)
              : n === mdApp_redirectCountryCode &&
                this._setCountrySelector(d.a),
            this._addCountryEvents(d.a))),
      this.sortLiSelect(l),
      (u.has("country") && 2 === u.get("country").length) ||
        (u.has("mdApp_countryCodeDomain") &&
          2 === u.get("mdApp_countryCodeDomain").length))
    ) {
      m = u.has("country")
        ? u.get("country")
        : u.get("mdApp_countryCodeDomain");
      d = this.getCountryDomain();
      let t = !1;
      Array.from(l.querySelectorAll("a")).forEach((e) => {
        e.dataset.country === m && (t = !0);
      }),
        t &&
          (document.cookie = `mdApp_countryCodeDomain=${m}; domain=${d}; path=/; max-age=5184000;`);
    }
    if (
      (this._translateText(n, e),
      this._setKlaviyoProperties(),
      "true" === this.getCookie("mdApp_cookieModalTime"))
    )
      return !0;
    d = this.isFirstVisit();
    if (a !== n || d) {
      if (
        (this._setFlagHeaderIcon(),
        Array.from(l.querySelectorAll("a")).forEach((e) => {
          ((e.dataset.regionmode && e.dataset.country === o) ||
            e.dataset.country === n) &&
            (this._setCountrySelector(e),
            null !== this.elements.formSelectLanguage &&
              this.refreshLanguageSelector(
                this.elements.formSelectLanguage,
                this.elements.formSelectCountry,
                this.elements.formUlLanguageSelect,
                this.elements.formUlCountrySelect
              ));
        }),
        this.excludePathEnabledAndExists())
      )
        return !0;
      if (
        (void 0 !== (m = this.getCookie("mdApp_countryCodeDomain")) &&
          (m.length < 2 || 3 < m.length) &&
          ((e = this.getCountryDomain()),
          (document.cookie = `mdApp_countryCodeDomain=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${e};`)),
        !1 === d &&
          this.advancedLanguageSettings
            .option_language_force_showRecommendation &&
          null !== s &&
          Array.from(i.querySelectorAll("a")).forEach((e) => {
            (e.dataset.value !== r[0] &&
              e.dataset.value !== navigator.language) ||
              this._setLanguageSelector(e);
          }),
        void 0 === m || (2 !== m.length && 3 !== m.length) || !1 !== d)
      ) {
        if (!this.forceHideOrbe) {
          if (
            "undefined" != typeof mdApp_forceSetCountry &&
            "" != mdApp_forceSetCountry
          ) {
            let t = !1;
            Array.from(l.querySelectorAll("a")).forEach((e) => {
              e.dataset.country === n && (t = !0);
            }),
              !1 === t &&
                Array.from(l.querySelectorAll("a")).forEach((e) => {
                  e.dataset.country === mdApp_forceSetCountry &&
                    (this._setCountrySelector(e),
                    null !== this.elements.formSelectLanguage &&
                      this.refreshLanguageSelector(
                        this.elements.formSelectLanguage,
                        this.elements.formSelectCountry,
                        this.elements.formUlLanguageSelect,
                        this.elements.formUlCountrySelect
                      ));
                });
          }
          this.openModal(orbeUISelectors.defaultModal);
        }
      } else {
        this.debugMode && console.log("CookieCountry: " + m);
        let t = this.getCookie("mdApp_domainUrlTo"),
          o = !1,
          r = !1;
        if (
          (Array.from(l.querySelectorAll("a")).forEach((e) => {
            e.dataset.country === m && (o = !0),
              void 0 !== t &&
                t.includes(e.dataset.domainurl) &&
                e.dataset.country === m &&
                (r = !0);
          }),
          !1 === o)
        )
          return (
            (a = this.getCountryDomain()),
            (document.cookie = `mdApp_countryCodeDomain=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${a};`),
            this.openModal(orbeUISelectors.defaultModal),
            !0
          );
        if (void 0 !== t && !1 === r && !1 === mdApp_redirectMode)
          return (
            (e = this.getCountryDomain()),
            (document.cookie = `mdApp_domainUrlTo=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${e};`),
            this.openModal(orbeUISelectors.defaultModal),
            !0
          );
        if (
          n === m ||
          !0 === this.secondVisitSettings.option_force_redirect_behaviour
        ) {
          this.metricsRequest(this.merchantKey, "redirection").then((e) => e);
          if (void 0 !== t) {
            let e = this._forceRedirectFullPath(!0, m);
            return ("" === e && (e = "?country=" + m + window.location.hash),
            this.debugMode && console.log("mdApp_domainUrlTo_urlParams: " + e),
            !0 === this.secondVisitSettings.option_force_redirect_behaviour &&
              m === window.Shopify.country)
              ? !0
              : (!1 === this.debugMode &&
                  (t.includes("https://")
                    ? (window.location = t + e)
                    : (window.location = "https://" + t + e)),
                !0);
          }
          {
            !0 === this.secondVisitSettings.option_force_redirect_behaviour &&
              Array.from(l.querySelectorAll("a")).forEach((e) => {
                e.dataset.country === m &&
                  (this._setCountrySelector(e),
                  null !== this.elements.formSelectLanguage &&
                    this.refreshLanguageSelector(
                      this.elements.formSelectLanguage,
                      this.elements.formSelectCountry,
                      this.elements.formUlLanguageSelect,
                      this.elements.formUlCountrySelect
                    ));
              });
            let t = this.getCookie("mdApp_showRecommendationLang");
            if (
              (void 0 !== t &&
                (this.advancedLanguageSettings
                  .option_language_force_showRecommendation ||
                  this.advancedLanguageSettings
                    .option_language_force_langRedirect) &&
                null !== s &&
                Array.from(i.querySelectorAll("a")).forEach((e) => {
                  e.dataset.value === t && this._setLanguageSelector(e);
                }),
              !0 === this.secondVisitSettings.option_force_redirect_behaviour &&
                m === window.Shopify.country)
            )
              return !0;
            !(this.secondVisitRedirect = !0) === this.debugMode && c.click();
          }
        }
      }
    } else if (u.has("showOrbe"))
      this._setFlagHeaderIcon(),
        Array.from(l.querySelectorAll("a")).forEach((e) => {
          ((e.dataset.regionmode && e.dataset.country === o) ||
            e.dataset.country === n) &&
            this._setCountrySelector(e);
        }),
        null !== this.elements.formSelectLanguage &&
          this.refreshLanguageSelector(
            s,
            t,
            this.elements.formUlLanguageSelect,
            this.elements.formUlCountrySelect
          ),
        this.forceHideOrbe || this.openModal(orbeUISelectors.defaultModal);
    else if (
      this.advancedLanguageSettings.option_language_force_showRecommendation
    ) {
      let t = this.getCookie("mdApp_showRecommendationLang");
      if (void 0 !== t && mdApp_currentLocaleCode === t) return !0;
      (this.advancedLanguageSettings.option_language_force_langRedirect ||
        this.secondVisitSettings.option_force_redirect_behaviour) &&
      void 0 !== t
        ? null !== s &&
          Array.from(i.querySelectorAll("a")).forEach((e) => {
            if (e.dataset.value === t)
              return (
                this._setLanguageSelector(e),
                this.elements.modalSubmitButton.click(),
                !0
              );
          })
        : mdApp_currentLocaleCode != r[0] &&
          mdApp_currentLocaleCode != navigator.language &&
          null !== s &&
          Array.from(i.querySelectorAll("a")).forEach((e) => {
            (e.dataset.value !== r[0] &&
              e.dataset.value !== navigator.language) ||
              (this._setLanguageSelector(e),
              this.forceHideOrbe || this.openAndRefreshModal());
          });
    }
  }
  async fetchAPI(e = "", t, o = {}) {
    return (
      0 === Object.keys(o).length &&
        (o = { "Content-Type": "application/json", "X-API-KEY": t }),
      await fetch(e, { method: "GET", mode: "cors", headers: o }).then((e) =>
        200 <= e.status && e.status < 300 ? e.json() : e
      )
    );
  }
  async init() {
    if (this.orbeSession.geolocation) return this.processGeolocation();
    "" !== this.merchantKey &&
      this.localCountry &&
      "false" === mdApp_skipRequestAPI &&
      (await this.geolocationRequest(this.merchantKey));
  }
  getCookie(e) {
    let t = "; " + document.cookie,
      o = t.split(`; ${e}=`);
    if (2 === o.length) return o.pop().split(";").shift();
  }
  sortLiSelect(e) {
    const t = e;
    e = t.querySelectorAll("li");
    t.append(
      ...[...e].sort((e, t) => {
        (e = e.dataset.name), (t = t.dataset.name);
        return e < t ? -1 : t < e ? 1 : 0;
      })
    );
  }
  _setKlaviyoProperties() {
    if ("free" !== this.currentPlan) {
      var e = sessionStorage.getItem("orbeKlaviyoSession");
      if (
        !e &&
        this.getCookie("mdApp_countryCodeDomain") &&
        this.klaviyoConnect &&
        "undefined" != typeof klaviyo
      ) {
        let t = "";
        null !== this.elements.formSelectLanguage &&
          (t = this.elements.formSelectLanguage.dataset.value),
          klaviyo.isIdentified().then((e) => {
            e &&
              klaviyo
                .identify({
                  "Country (Orbe)": this.getCookie("mdApp_countryCodeDomain"),
                  "Language (Orbe)": t,
                })
                .then(() => {
                  sessionStorage.setItem("orbeKlaviyoSession", "true");
                });
          });
      }
    }
  }
  _replaceTextVars(e, t, o) {
    if ("en" === o)
      switch (t.dataset.country) {
        case "BS":
        case "GM":
        case "NL":
        case "PH":
        case "AE":
        case "GB":
        case "US":
          e = "the " + e;
      }
    1 < this.elements.formMDAppTitle.innerHTML.search("{md_country}")
      ? (this.elements.formMDAppTitle.innerHTML =
          this.elements.formMDAppTitle.innerHTML.replaceAll("{md_country}", e))
      : this.elements.formMDAppTitle.innerHTML.search("{country}") &&
        (this.elements.formMDAppTitle.innerHTML =
          this.elements.formMDAppTitle.innerHTML.replaceAll("{country}", e)),
      this.elements.formMDAppText.innerHTML.search("{country}") &&
        (this.elements.formMDAppText.innerHTML =
          this.elements.formMDAppText.innerHTML.replaceAll("{country}", e)),
      this.elements.formMDAppHelperText.innerHTML.search("{country}") &&
        (this.elements.formMDAppHelperText.innerHTML =
          this.elements.formMDAppHelperText.innerHTML.replaceAll(
            "{country}",
            e
          )),
      this.elements.formMDAppCTAText.innerHTML.search("{country}") &&
        (this.elements.formMDAppCTAText.innerHTML =
          this.elements.formMDAppCTAText.innerHTML.replaceAll("{country}", e)),
      this.elements.formMDAppTitle.innerHTML.search("{currency_code}") &&
        (this.elements.formMDAppTitle.innerHTML =
          this.elements.formMDAppTitle.innerHTML.replaceAll(
            "{currency_code}",
            t.dataset.currency
          )),
      this.elements.formMDAppText.innerHTML.search("{currency_code}") &&
        (this.elements.formMDAppText.innerHTML =
          this.elements.formMDAppText.innerHTML.replaceAll(
            "{currency_code}",
            t.dataset.currency
          )),
      this.elements.formMDAppHelperText.innerHTML.search("{currency_code}") &&
        (this.elements.formMDAppHelperText.innerHTML =
          this.elements.formMDAppHelperText.innerHTML.replaceAll(
            "{currency_code}",
            t.dataset.currency
          )),
      this.elements.formMDAppCTAText.innerHTML.search("{currency_code}") &&
        (this.elements.formMDAppCTAText.innerHTML =
          this.elements.formMDAppCTAText.innerHTML.replaceAll(
            "{currency_code}",
            t.dataset.currency
          )),
      this.elements.formMDAppTitle.innerHTML.search("{currency_symbol}") &&
        (this.elements.formMDAppTitle.innerHTML =
          this.elements.formMDAppTitle.innerHTML.replaceAll(
            "{currency_symbol}",
            t.dataset.symbol
          )),
      this.elements.formMDAppText.innerHTML.search("{currency_symbol}") &&
        (this.elements.formMDAppText.innerHTML =
          this.elements.formMDAppText.innerHTML.replaceAll(
            "{currency_symbol}",
            t.dataset.symbol
          )),
      this.elements.formMDAppHelperText.innerHTML.search("{currency_symbol}") &&
        (this.elements.formMDAppHelperText.innerHTML =
          this.elements.formMDAppHelperText.innerHTML.replaceAll(
            "{currency_symbol}",
            t.dataset.symbol
          )),
      this.elements.formMDAppCTAText.innerHTML.search("{currency_symbol}") &&
        (this.elements.formMDAppCTAText.innerHTML =
          this.elements.formMDAppCTAText.innerHTML.replaceAll(
            "{currency_symbol}",
            t.dataset.symbol
          ));
  }
  isFirstVisit() {
    var e = this.getCookie("mdApp_countryCodeDomain");
    return (
      (void 0 === e || 2 !== e.length) &&
      !1 !== this.firstVisitSettings.option_force_showModal_behaviour
    );
  }
  hasForceExternalStoreRedirect() {
    if (this.forceExternalStoreRedirectMode) {
      const e = this.forceExternalStoreRedirectList;
      let t = !1;
      if (
        (e.forEach((e) => {
          e === window.location.hostname && (t = !0);
        }),
        t)
      )
        return !0;
    }
    return !1;
  }
  searchCountryInput() {
    let e, t, o, r, n, a, l, s, i;
    for (
      t = (e = this.elements.searchCountryInput).value.toUpperCase(),
        o = this.elements.formUlCountrySelect,
        (r = o.getElementsByTagName("a"))[0].parentElement.style.display =
          "list-item",
        r[0].parentElement.style.height = "",
        a = 0;
      a < r.length;
      a++
    )
      r[a].classList.contains("md-form__select__country__list-link") &&
        ((s = (n = r[a]).querySelector("span")),
        (i = n.dataset.country),
        -1 < (l = s.textContent || s.innerText).toUpperCase().indexOf(t) ||
        -1 < i.toUpperCase().indexOf(t)
          ? ((r[a].style.display = ""),
            (r[a].parentElement.style.display = "list-item"),
            (r[a].parentElement.style.height = ""))
          : ((r[a].style.display = "none"),
            (r[a].parentElement.style.display = "none")));
    var c =
      "ul#" +
      orbeUISelectors.formUlCountrySelect +
      ' li[style*="display: list-item;"]';
    0 == document.querySelectorAll(c).length &&
      ((r[0].parentElement.style.display = "list-item"),
      (r[0].parentElement.style.height = "40px"));
  }
}
const orbito = new Orbe(mdApp_merchantKey, mdApp_currentCountryCode);
async function mdApp_orbeCountryCode() {
  return orbito.getRemoteCountryCode();
}
function mdApp_openAndRefreshModal() {
  orbito.openAndRefreshModal();
}
function mdApp_openModal(e = "") {
  orbito.openModal(e);
}
function mdApp_closeModal(e = "") {
  orbito.closeModal(e);
}
function mdApp_getCountryDomain() {
  orbito.getCountryDomain();
}
orbito.init();
